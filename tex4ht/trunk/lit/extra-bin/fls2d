#!/usr/bin/env bash
#
# Summary: process *.fls file, output *.d file (Makefile format)
#          with  lists of dependencies and derived files.
#          Second optional param is for removing from deps
#
# Usage: fls2d foo.fls [bar.4ht]
#
# 
# 
set -e
input=$1
stem=${1%.*}
filter=$2 #remove file(s)
doc=./html.dir/${stem}/${stem}.html


awk -v stem=${stem} '
      BEGIN    {
                 auxfiles = stem".""(xref|fls|aux|tmp|4tc|4ct)" # remove foo.aux, etc.
                 begin_with_slash = "^/"                        # remove entries with absolute path
                 htmldir = "html.dir"
                 print "##\n## Script generated file. Please do not edit\n##"
               }
      END      { print "# derived files list from " stem ".fls." }
      END      { print "define " stem "_derived" }
      # print derived files
      END      { for ( j = 1; j < ii+1; j++) print " "outpi[j]"\\" }
      END      { print "\nendef" }
      END      { print "# deps files list from " stem ".fls." }
      END      { print "define " stem "_deps" }
      # print deps files that is not in derived files list
      # otherwise we have circular dependency issue
      END      { for ( j = 1; j < i+1; j++) if (inpi[j] in outp) ; else  print " "inpi[j]"\\" } 
      END      { print "\nendef" }
      END      { print "# set main html file" }
      END      { print "define " stem "_doc" }
      END      { print " " htmldir "/" stem "/" stem ".html"}
      END      { print "\nendef" }
      $1 == "OUTPUT" && $2 !~ stem && $2 !~ begin_with_slash { outp[$2] = $2; ii++; outpi[ii] = $2 }
      # remove dublicates
      # keep sequentual order
      $1 == "INPUT"  &&               $2 !~ begin_with_slash && $2 !~ auxfiles { if ( $2 in inp) ; else { inp[$2] = $2; i++ ; inpi[i] = $2 } }
    ' ${input}

